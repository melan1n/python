"""A board is a list of list of str. For example, the board
    ANTT
    XSOB
is represented as the list
    [['A', 'N', 'T', 'T'], ['X', 'S', 'O', 'B']]

A word list is a list of str. For example, the list of words
    ANT
    BOX
    SOB
    TO
is represented as the list
    ['ANT', 'BOX', 'SOB', 'TO']
"""


def is_valid_word(wordlist, word):
    """ (list of str, str) -> bool

    Return True if and only if word is an element of wordlist.

    >>> is_valid_word(['ANT', 'BOX', 'SOB', 'TO'], 'TO')
    True
    """
    
    if word in wordlist:
        return True
    
    return False 
    
def make_str_from_row(board, row_index):
    """ (list of list of str, int) -> str

    Return the characters from the row of the board with index row_index
    as a single string.

    >>> make_str_from_row([['A', 'N', 'T', 'T'], ['X', 'S', 'O', 'B']], 0)
    'ANTT'
    """

    str_from_row = ''

    for letter in board[row_index]:
        str_from_row = str_from_row + letter

    return str_from_row
        
        
def make_str_from_column(board, column_index):
    """ (list of list of str, int) -> str

    Return the characters from the column of the board with index column_index
    as a single string.

    >>> make_str_from_column([['A', 'N', 'T', 'T'], ['X', 'S', 'O', 'B']], 1)
    'NS'
    """

    str_from_column = ''

    for row in board:
        str_from_column = str_from_column + row[column_index]

    return str_from_column


def board_contains_word_in_row(board, word):
    """ (list of list of str, str) -> bool

    Return True if and only if one or more of the rows of the board contains
    word.

    Precondition: board has at least one row and one column, and word is a
    valid word.

    >>> board_contains_word_in_row([['A', 'N', 'T', 'T'], ['X', 'S', 'O', 'B']], 'SOB')
    True
    """

    for row_index in range(len(board)):
        if word in make_str_from_row(board, row_index):
            return True

    return False


def board_contains_word_in_column(board, word):
    """ (list of list of str, str) -> bool

    Return True if and only if one or more of the columns of the board
    contains word.

    Precondition: board has at least one row and one column, and word is a
    valid word.

    >>> board_contains_word_in_column([['A', 'N', 'T', 'T'], ['X', 'S', 'O', 'B']], 'NO')
    False
    """

    for column_index in range(len(board[0])):
        if word in make_str_from_column(board, column_index):
            return True

    return False
                              


def board_contains_word(board, word):
    """ (list of list of str, str) -> bool

    Return True if and only if word appears in board.

    Precondition: board has at least one row and one column.

    >>> board_contains_word([['A', 'N', 'T', 'T'], ['X', 'S', 'O', 'B']], 'ANT')
    True
    """

    if board_contains_word_in_row(board, word) or board_contains_word_in_column(board, word):
        return True

    return False
        
    

def word_score(word):
    """ (str) -> int

    Return the point value the word earns.

    Word length: < 3: 0 points
                 3-6: 1 point per character for all characters in word
                 7-9: 2 points per character for all characters in word
                 10+: 3 points per character for all characters in word

    >>> word_score('DRUDGERY')
    16
    """
    
    if 6 >= len(word) >= 3:
        score_result = len(word)
    elif 9 >= len(word) >= 7:
        score_result = len(word)*2
    elif len(word) >= 10:
        score_result = len(word)*3
    else:
        score_result = 0

    return score_result


    

def update_score(player_info, word):
    """ ([str, int] list, str) -> NoneType

    player_info is a list with the player's name and score. Update player_info
    by adding the point value word earns to the player's score.

    >>> update_score(['Jonathan', 4], 'ANT')
    """
    player_info[1] = player_info[1] + word_score(word)
    
'''also ok:
    lst = []
    lst = player_info
    i=0
    while i < len(player_info):
        lst[i] = player_info[i]
        i=i+1
        
    lst[1] = lst[1] + word_score(word)
   ''' 
        
  
def num_words_on_board(board, words):
    """ (list of list of str, list of str) -> int

    Return how many words appear on board.

    >>> num_words_on_board([['A', 'N', 'T', 'T'], ['X', 'S', 'O', 'B']], ['ANT', 'BOX', 'SOB', 'TO'])
    3
    """
    
    count_of_words_on_board = 0

    for word in words:
        if board_contains_word(board, word) is True:
            count_of_words_on_board = count_of_words_on_board + 1

    return count_of_words_on_board
        


def read_words(words_file):
    """ (file open for reading) -> list of str

    Return a list of all words (with newlines removed) from open file
    words_file.

    Precondition: Each line of the file contains a word in uppercase characters
    from the standard English alphabet.
    """
    filename ='/Users/Notandi/Desktop/Dev/Python/Introduction/File_words.txt'
    file = open(filename, 'r')
    
    word_list = file.readlines()
    new_list = []
     

    for line in word_list:
        if line !='\n':
            line = line.rstrip('\n')
            new_list.append(line)
        else:
            new_list = new_list

    return new_list

    
def read_board(board_file):
    """ (file open for reading) -> list of list of str

    Return a board read from open file board_file. The board file will contain
    one row of the board per line. Newlines are not included in the board.
    """
    filename_board ='/Users/Notandi/Desktop/Dev/Python/Introduction/board_file.txt'
    file_board = open(filename_board, 'r')
    
    board = []
    line = file_board.readline()
    
    #read each line. Get a string. Strip new line character.
    while line != '':
        line = line.rstrip('\n')
    
    #transform the line string into a list of chars
        line_list = []
    
        for char in line:
            line_list.append(char)
                    
    #append lists to return a board
        board.append(line_list)
        line = file_board.readline()

    return board
    
    
