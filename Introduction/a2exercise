def get_length(dna):
    """ (str) -> int

    Return the length of the DNA sequence dna.

    >>> get_length('ATCGAT')
    6
    >>> get_length('ATCG')
    4
    """
    
    return len(dna)

def is_longer(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna1 is longer than DNA sequence
    dna2.

    >>> is_longer('ATCG', 'AT')
    True
    >>> is_longer('ATCG', 'ATCGGA')
    False
    """
    dna1_length = get_length(dna1)
    dna2_length = get_length(dna2)    

    if dna1_length > dna2_length:
        return True
    else: return False
        
def count_nucleotides(dna, nucleotide):
    """ (str, str) -> int

    Return the number of occurrences of nucleotide in the DNA sequence dna.

    >>> count_nucleotides('ATCGGC', 'G')
    2
    >>> count_nucleotides('ATCTA', 'G')
    0
    """

    nucleotide_count = 0
    for char in dna:
        if char == nucleotide:
            nucleotide_count = nucleotide_count + 1
    return nucleotide_count
    
def contains_sequence(dna1, dna2):
    """ (str, str) -> bool

    Return True if and only if DNA sequence dna2 occurs in the DNA sequence
    dna1.

    >>> contains_sequence('ATCGGC', 'GG')
    True
    >>> contains_sequence('ATCGGC', 'GT')
    False

    """

    contains = 1 > 1
    
    if dna2 in dna1:
        contains = 2 > 1
     
    return contains

def is_valid_sequence(dna_sequence):
     
    """(str) -> bool

    Return True if and only if the DNA sequence is valid
    (that is, it contains no characters other than 'A', 'T', 'C' and 'G').

    >>> is_valid_sequence('AT')
    True
    >>> is_valid_sequence('AB')
    False
    >>> is_valid_sequence('ATN')
    False
    >>> is_valid_sequence('ANT')
    False
    >>> is_valid_sequence('A')
    True
    >>> is_valid_sequence('At')
    False
    >>> is_valid_sequence('')
    False
    """

    valid_sequence = 2 > 1

    if dna_sequence == '':
        valid_sequence = 1 > 1
        
    for char in dna_sequence:
        if char not in 'ATCG':
            valid_sequence = 1 > 1   
        
                    
    return valid_sequence

def insert_sequence(dna1, dna2, index):

    '''(str, str, int) -> str

    Return the DNA sequence obtained by inserting the second DNA sequence into
    the first DNA sequence at the given index. (You can assume that the index
    is valid.)

    >>> insert_sequence('CCGG', 'AT', 2)
    'CCATGG'
    >>> insert_sequence('CCGG', 'AT', 0)
    ATCCGG
    >>> insert_sequence('CCGG', 'AT', 3)
    CCGGAT
    '''
    
    left_dna1 = dna1[0:index]
    right_dna1 = dna1[index:]

    return left_dna1 + dna2 + right_dna1


def get_complement(nucleotide):

    """(str) -> str

    The first parameter is a nucleotide ('A', 'T', 'C' or 'G').
    Return the nucleotide's complement.
    A-T
    T-A
    C-G
    G-C

    >>> get_complement('G')
    'C'
    >>> get_complement('C')
    'G'
    >>> get_complement('A')
    'T'
    >>> get_complement('T')
    'A'
    """

    compliment = 'Please submit a valid nucleotide'
     

    if nucleotide == 'A':
        compliment = 'T'

    if nucleotide == 'T':
        compliment = 'A'

    if nucleotide == 'C':
        compliment = 'G'

    if nucleotide == 'G':
        compliment = 'C'

   
    return compliment


def get_complementary_sequence(dna):

    """(str) -> str

    Return the DNA sequence that is complementary to the given DNA sequence.

    >>> get_complementary_sequence('AT')
    'TA'
    >>> get_complementary_sequence('GC')
    'CG'
    >>> get_complementary_sequence('AGT')
    'TCA'
    >>> get_complementary_sequence('AoT')
    'Please submit a valid DNA sequence'    
    """

    complementary_sequence = ''

    for nucleotide in dna:
        complementary_sequence = complementary_sequence + get_complement(nucleotide) 

    if 'Please submit a valid nucleotide' in complementary_sequence:
        complementary_sequence = 'Please submit a valid DNA sequence'

    return complementary_sequence
    
